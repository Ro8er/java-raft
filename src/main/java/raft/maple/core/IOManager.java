package raft.maple.core;import raft.maple.Config;import raft.maple.socket.RPClient;import raft.maple.socket.RPCServer;import java.io.OutputStream;import java.util.*;import java.util.concurrent.ConcurrentHashMap;import java.util.concurrent.ExecutorService;/** * @author yilin wang <yiliwang@student.unimelb.edu.au> * @version 1.0 * @since 1.0 * <p> * The University of Melbourne COMP900020 Assignment created in 2021/04: * core.IOManager is where each raftNode can manage their I/O sockets */public class IOManager extends Thread {    private int port = 3030;    private int localIndex = 0;    private RPCServer RPCServer = null;    private Map<Integer, RPClient> RPClients = new ConcurrentHashMap<>();    private OutputStream output = null;    private RaftNode nodeBelongsTo;    /**     * if i am not elected as the leader, i will release all my clientRPC connection to other servers     * @since 1.0     */    public void clearRPCients() {        for (RPClient client : RPClients.values()) {            client.closeConnection();        }        RPClients.clear();    }    /**     * Constructs an IO manager for the raftNode. Any raftNode should always keep their own server running,     * so IO manager will set up an RPC server.     *     * @param index my local index(local raftNode)     * @param node  binded RaftNote     * @since 1.0     */    public IOManager(int index, RaftNode node) {        this.localIndex = index;        this.port = port + index;        this.nodeBelongsTo = node;        this.RPCServer = new RPCServer(this.port, index, node);        ExecutorService es = node.getEs();        es.submit(() -> RPCServer.startRPCServer());    }    /**     * Set up a new RPC client connection with desIndex server or return the connected connection with this desIndex server     *     * @param desIndex     * @return RPClient that connected to desIndex server     * @since 1.0     */    public RPClient getRPClientById(int desIndex) {        try {            if (!RPClients.containsKey(desIndex) || RPClients.get(desIndex) == null) {                RPClient client = new RPClient(Config.getHost(), 3030 + desIndex, desIndex, nodeBelongsTo);                if (client.getEndpoint() != null) {                    RPClients.put(desIndex, client);                }            }        } catch (Exception e) {            e.printStackTrace();        }        return RPClients.getOrDefault(desIndex, null);    }    public int getPort() {        return port;    }    public int getLocalIndex() {        return localIndex;    }    public raft.maple.socket.RPCServer getRPCServer() {        return RPCServer;    }    public Map<Integer, RPClient> getRPClients() {        return RPClients;    }    public OutputStream getOutput() {        return output;    }}