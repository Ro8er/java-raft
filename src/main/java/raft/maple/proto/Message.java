package raft.maple.proto;import java.util.Arrays;import java.util.List;/** * @author yilin wang <yiliwang@student.unimelb.edu.au> * @version 1.0 * @since 1.0 * <p> * The University of Melbourne COMP900020 Assignment created in 2021/04: * This class encapsulate the I/O content to an object message */public class Message {    private MessageType type;    private Integer localId;    private Long leaderCommitIndex;    private Long currentTerm;    private Long lastLogIndex;    private Long lastAppliedIndex;    private Long lastLogTerm;    private byte[] data;    private List<Log> logs;    private Boolean voteGrant;    private int status; //200 ok, 300 forward, 400 request denied    private long logCopiedSize;    private String token;    public enum MessageType {        VOTE_REQUEST,        VOTE_RESPONSE,        HEARTBEAT,        USER_REQUEST,        USER_REQUEST_RESPONSE,        APPEND_ENTRY_REQUEST,        APPEND_ENTRY_RESPONSE,        COMMIT_REQUEST,        COMMIT_RESPONSE,    }    public String getToken() {        return token;    }    public void setToken(String token) {        this.token = token;    }    public long getLogCopiedSize() {        return logCopiedSize;    }    public void setLogCopiedSize(long logCopiedSize) {        this.logCopiedSize = logCopiedSize;    }    public Message(MessageType type, int localId) {        this.type = type;        this.localId = localId;    }    public Message() {    }    public Long getLeaderCommitIndex() {        return leaderCommitIndex;    }    public void setLeaderCommitIndex(Long leaderCommitIndex) {        this.leaderCommitIndex = leaderCommitIndex;    }    public MessageType getType() {        return type;    }    public void setType(MessageType type) {        this.type = type;    }    public Integer getLocalId() {        return localId;    }    public void setLocalId(Integer localId) {        this.localId = localId;    }    public Long getCurrentTerm() {        return currentTerm;    }    public void setCurrentTerm(Long currentTerm) {        this.currentTerm = currentTerm;    }    public Long getLastLogIndex() {        return lastLogIndex;    }    public void setLastLogIndex(Long lastLogIndex) {        this.lastLogIndex = lastLogIndex;    }    public Long getLastAppliedIndex() {        return lastAppliedIndex;    }    public void setLastAppliedIndex(Long lastAppliedIndex) {        this.lastAppliedIndex = lastAppliedIndex;    }    public Long getLastLogTerm() {        return lastLogTerm;    }    public void setLastLogTerm(Long lastLogTerm) {        this.lastLogTerm = lastLogTerm;    }    public byte[] getData() {        return data;    }    public void setData(byte[] data) {        this.data = data;    }    public void setStatus(Integer status) {        this.status = status;    }    public Boolean getVoteGrant() {        return voteGrant;    }    public void setVoteGrant(Boolean voteGrant) {        this.voteGrant = voteGrant;    }    public List<Log> getLogs() {        return logs;    }    public void setLogs(List<Log> logs) {        this.logs = logs;    }    public int getStatus() {        return status;    }    public void setStatus(int status) {        this.status = status;    }    @Override    public String toString() {        return "Message{" +                "type=" + type +                ", localId=" + localId +                ", leaderCommitIndex=" + leaderCommitIndex +                ", currentTerm=" + currentTerm +                ", lastLogIndex=" + lastLogIndex +                ", lastAppliedIndex=" + lastAppliedIndex +                ", lastLogTerm=" + lastLogTerm +                ", data=" + Arrays.toString(data) +                ", logs=" + logs +                ", voteGrant=" + voteGrant +                ", status=" + status +                ", logCopiedSize=" + logCopiedSize +                '}';    }}