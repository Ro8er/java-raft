package raft.maple.socket;import raft.maple.Util.JsonTool;import raft.maple.core.RaftNode;import raft.maple.proto.Message;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.Socket;import java.util.Map;import java.util.logging.Logger;/** * @author yilin wang <yiliwang@student.unimelb.edu.au>, kim * @version 1.0 * @since 1.0 * <p> * The University of Melbourne COMP900020 Assignment created in 2021/04: * This class is where the endpoint write and read to each other. */public class Endpoint {    private OutputStream output = null;    private InputStream input = null;    private int index;    private static Logger log = Logger.getLogger(Endpoint.class.getName());    private RaftNode raftNode;    public Endpoint(Socket socket, int index, RaftNode node) {        this.index = index;        this.raftNode = node;        try {            output = socket.getOutputStream();            input = socket.getInputStream();        } catch (IOException e) {            e.printStackTrace();        }    }    /**     * Listen on this channel. And callback the corresponding method in raftNode     */    public void listen() {        try {            byte[] buf = new byte[1024 * 100];            int len = 0;            while ((len = input.read(buf)) != -1) {                String text = new String(buf, 0, len);                Message msg = JsonTool.JsonStringToObject(text, Message.class);                Message.MessageType type = msg.getType();                if (type == Message.MessageType.VOTE_REQUEST) {                    send(raftNode.voteRequestResponse(msg));                }                if (type == Message.MessageType.VOTE_RESPONSE) {                    raftNode.processVoteResponse(msg);                }                if (type == Message.MessageType.USER_REQUEST) {                    send(raftNode.userRequestResponse(msg));                }                if (type == Message.MessageType.APPEND_ENTRY_REQUEST) {                    send(raftNode.appendEntryResponse(msg));                }                if (type == Message.MessageType.APPEND_ENTRY_RESPONSE) {                    raftNode.processAppendEntryResponse(msg);                }            }        } catch (Exception e) {            log.warning(e.getMessage());        }        try {            input.close();            output.close();        } catch (IOException e) {            log.warning("connection did not close properly: " + e.getMessage());        } finally {            Map<Integer, RPClient> RPClients = raftNode.getIoManager().getRPClients();            if (RPClients != null && index != raftNode.getLocalId()) {                RPClients.remove(index);            }        }    }    /**     * sending the content through this endpoint     * @param content sending content     */    public void send(String content) {        if (content != null) {            try {                output.write(content.getBytes());                output.flush();            } catch (Exception e) {                try{                    input.close();                    output.close();                }catch (Exception e1){                    log.warning("stream does not close properly");                }            }        }    }}